{##
 # This file is part of the SgDatatablesBundle package.
 #
 # (c) stwe <https://github.com/stwe/DatatablesBundle>
 #
 # For the full copyright and license information, please view the LICENSE
 # file that was distributed with this source code.
 #}
{% import _self as macros %}

{% macro link_title(action) %}
    {% if action.label is same as(null) and action.icon is same as(null) %}
        {% if action.route is not same as(null) %}
            {{ action.route }}
        {% else %}
            null
        {% endif %}
    {% else %}
        <i class="{{ action.icon }}"></i> {{ action.label }}
    {% endif %}
{% endmacro %}

{% macro attributes(action) %}
    {% for key, value in action.attributes %}
        {{ key }}="{{ value }}"
    {% endfor %}
{% endmacro %}

{% macro confirm_dialog(action) %}
    {% if action.confirm is same as(true) %}
        {% if action.confirmMessage is not same as(null) %}
            data-message="{{ action.confirmMessage }}"
        {% else %}
            data-message="{{ 'sg.datatables.confirmMessage'|trans({}, 'messages') }}"
        {% endif %}
    {% endif %}
{% endmacro %}

{% macro href(action, route_parameters) %}
    {% if action.routeParameters is not same as(null) %}
        {% if app.request.locale is defined and app.request.locale is not null %}
            {% if '_locale' in route_parameters|keys %}
                {% set route_parameters = route_parameters|merge({ '_locale': app.request.locale }) %}
            {% endif %}
        {% endif %}
    {% endif %}

    {% if action.route is not same as(null) %}
        href="{{ path(action.route, route_parameters) }}"
    {% else %}
        href="javascript:void(0);"
    {% endif %}
{% endmacro %}

{% macro value(value) %}
    {% if value is not null %}
        value="{{ url(value) }}"
    {% endif %}
{% endmacro %}
{#
{% set multiselect_actions %}
    {% for actionKey, action in actions %}
        {% if action.callRenderIfClosure is same as(true) %}
            {% if action.button is same as(false) %}
                {{ action.startHtml|raw }}
                <a {{ macros.href(action, route_parameters[actionKey]) }} {{ macros.attributes(action) }} {{ macros.confirm_dialog(action) }}>
                    {{ macros.link_title(action) }}
                </a>
                {{ action.endHtml|raw }}
            {% else %}
                {{ action.startHtml|raw }}
                <button type="button" {{ macros.value(values[actionKey]) }} {{ macros.attributes(action) }} {{ macros.confirm_dialog(action) }}>
                    {{ macros.link_title(action) }}
                </button>
                {{ action.endHtml|raw }}
            {% endif %}
        {% endif %}
    {% endfor %}
{% endset %}#}

{% set multiselect_actions %}
    <span></span>
    <select id="table-group-action-input" class="table-group-action-input bs-select form-control input-inline input-small">
        <option value="">Seleccionar...</option>
        {% for actionKey, action in actions %}
            {% if action.callRenderIfClosure is same as(true) %}
                {{ action.startHtml|raw }}
                <option {{ macros.value(values[actionKey]) }}><i class="fa fa-close"></i> {{ macros.link_title(action) }}</option>
                {{ action.endHtml|raw }}
                {% if action.button is same as(false) %}
                {% endif %}
            {% endif %}
        {% endfor %}
    </select>
    <button class="btn btn-sm green table-group-action-submit" data-message="{{ 'sg.datatables.confirmMessage'|trans({}, 'messages') }}">
        <i class="fa fa-check"></i> Enviar</button>
{% endset %}

{# add multiselect actions #}
{% if dom_id is null %}
    $("#sg-datatables-{{ datatable_name }}-multiselect-actions").append("{{ multiselect_actions|e('js') }}");
{% else %}
    $("#{{ dom_id }}").append("{{ multiselect_actions|e('js') }}");
{% endif %}

{# function to update the check-all-checkbox #}
function updateCheckAll() {
    var cbox_all = $("#sg-datatables-{{ datatable_name }} tbody input.sg-datatables-{{ datatable_name }}-multiselect-checkbox:checkbox");
    var cbox_checked = $("#sg-datatables-{{ datatable_name }} tbody input.sg-datatables-{{ datatable_name }}-multiselect-checkbox:checkbox:checked");
    var cbox_checkall = $("#sg-datatables-{{ datatable_name }} input.sg-datatables-{{ datatable_name }}-multiselect-checkall:checkbox");

    if(cbox_checked.length === 0){
        cbox_checkall.prop('checked', false);
        cbox_checkall.prop('indeterminate', false);
    } else if (cbox_checked.length === cbox_all.length){
        cbox_checkall.prop('checked', true);
        cbox_checkall.prop('indeterminate', false);
    } else {
        cbox_checkall.prop('checked', false);
        cbox_checkall.prop('indeterminate', true);
    }

    countSelectedRecords();
}

$('.bs-select').selectpicker({
    iconBase: 'fa',
    tickIcon: 'fa-check',
    noneSelectedText: '',
    container: true
})

{# handle row <tr> click #}
$("#sg-datatables-{{ datatable_name }} tbody").on("click", "tr", function () {
    {# add 'selected' class #}
    if ($(this).find("input").length) {
        $(this).toggleClass("selected");
    }

    {# set !checked for the row checkbox #}
    $(this).find("input.sg-datatables-{{ datatable_name }}-multiselect-checkbox:checkbox").each(function() {
        this.checked = !this.checked;
    });

    updateCheckAll();
});

{# handle checkbox <input> click #}
$("#sg-datatables-{{ datatable_name }} tbody").on("click", "input.sg-datatables-{{ datatable_name }}-multiselect-checkbox:checkbox", function () {
    this.checked = !this.checked;
    updateCheckAll();
});

{# select/unselect all checkboxes #}
$("#sg-datatables-{{ datatable_name }}").on("click", "input.sg-datatables-{{ datatable_name }}-multiselect-checkall:checkbox", function () {
    $("input.sg-datatables-{{ datatable_name }}-multiselect-checkbox").prop('checked', $(this).prop("checked"));
    var propCheck = $(this).prop("checked");
    $("#sg-datatables-{{ datatable_name }} tbody tr").each(function(){
        if ($(this).find("input").length) {
            if (true == propCheck) {
                $(this).addClass("selected");
            } else {
                $(this).removeClass("selected");
            }
        }
    });
});

{# handle multiselect action click #}
$(".dataTables_wrapper").on('click', '.table-group-action-submit', function (event) {
    event.preventDefault();

    var action = $(".table-group-action-input");

    if (action.val() != "" && oTable.rows(".selected").data().length > 0) {
        if ($(this).data("message")) {
            if (!confirm($(this).data("message"))) {
                return;
            }
        }

        var items = $.map(oTable.rows(".selected").data(), function (i) {
            return i
        });

        var pipeline = {{ pipeline }};

        {% set token = csrf_token('multiselect') %}

        var url = action.val();

        if (url != null) {
            $.ajax({
                url: url,
                type: "POST",
                cache: false,
                data: {
                    'data': items,
                    'token': "{{ token }}"
                },
                success: function(msg) {
                    if (pipeline > 0) {
                        oTable.clearPipeline().draw();
                    } else {
                        oTable.draw();
                    }
                    App.alert({
                        type: 'success',
                        icon: 'check',
                        message: msg,
                        container: tableWrapper,
                        place: 'prepend'
                    });
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    console.log(XMLHttpRequest + ' ' + textStatus + ' '  + errorThrown);
                    App.alert({
                        type: 'danger',
                        icon: 'warning',
                        message: msg,
                        container: tableWrapper,
                        place: 'prepend'
                    });
                }
            })
        }
    } else if (action.val() == "") {
        App.alert({
            type: 'danger',
            icon: 'warning',
            message: 'Por favor seleccione una acci√≥n',
            container: tableWrapper,
            place: 'prepend'
        });
    } else if (oTable.rows(".selected").data().length === 0) {
        App.alert({
            type: 'danger',
            icon: 'warning',
            message: 'No se seleccionaron registros',
            container: tableWrapper,
            place: 'prepend'
        });
    }
});
